const input = document.getElementById("input");
const output = document.getElementById("output");
const previewWrapper = document.getElementById("previewWrapper");
const previewSection = document.getElementById("previewSection");
const advancedOptions = document.getElementById("advancedOptionsSection");
const copyButton = document.getElementById("copy");
const advancedOptionsButton = document.getElementById("advancedOptionsButton");
const prefixInput = document.getElementById("prefixInput");

const DEFAULT_PREFIX_VALUE = "alphabet-";
const prefixValue = () => prefixInput.value || DEFAULT_PREFIX_VALUE;

const lowerCaseLetters = [...Array(26)]
	.map((val, i) => String.fromCharCode(i + 65).toLowerCase());

const blankSpace = ":blank:";

const wordMap = {
	"lol": ":lol:"
};

const numberMap = {
	1: ":one:",
	2: ":two:",
	3: ":three:",
	4: ":four:",
	5: ":five:",
	6: ":six:",
	7: ":seven:",
	8: ":eight:",
	9: ":nine:",
	0: ":zero:",
};

const specialCharsMap = () => ({
	"#": `:${prefixValue()}hash:`,
	"?": `:${prefixValue()}question:`,
	"!": `:${prefixValue()}exclamation:`,
	"@": `:${prefixValue()}at:`,
});

const allSupportedEmoji = () => [
	blankSpace,
	...Object.values(wordMap),
	...Object.values(numberMap),
	...Object.values(specialCharsMap()),
	...lowerCaseLetters.map((letter) => `:${prefixValue()}${letter}:`)
];

function flatten(arr) {
	return arr.reduce((soFar, current) => {
		return [...soFar, ...(Array.isArray(current) ? current : [current])];
	}, [])
}

function alphabetize(input) {
	return input
		.replace(/\w+/g, (match) => {
			if (wordMap[match.toLowerCase()]) {
				return wordMap[match.toLowerCase()]; // Replaces words.
			}

			return match.replace(/([A-z])+?/g, `:${prefixValue()}$1:`); // Replaces letters.
		})
		.replace(/([^\S\r\n])+?/g, blankSpace) // Replace spaces.
		.replace(/([0-9])+?/g, (match) => numberMap[match]) // Replaces numbers.
		.replace(/([?!#@])+?/g, (match) => specialCharsMap()[match]); // Replaces numbers.
}

function alphabetizePreview(alphabetized) {
	const emojiNames = alphabetized.split(":")
		.filter(Boolean)
		.map((emojiName) => emojiName.toLowerCase());
	const maybeFileNames = emojiNames.map((emojiName) => {
		if (!allSupportedEmoji().includes(`:${emojiName}:`)) {
			return emojiName.split('');
		}

		return `https://assets.codepen.io/1177378/${emojiName}.png`;
	});
	const nodes = maybeFileNames.map((maybeFileName) => {
		const isFileName = typeof maybeFileName === 'string';
		if (!isFileName) {
			// Process each character individually.
			return maybeFileName.map((char) => {
				const isLineBreak = char.match(/[\r\n]/) !== null;
				if (isLineBreak) {
					const br = document.createElement("br");
					return br;
				}

				const span = document.createElement("span");
				span.innerText = char;
				return span;
			})
		}

		const image = document.createElement("img");
		image.src = maybeFileName;

		return image;
	});

	const preview = document.createElement("div");
	flatten(nodes).forEach((node) => preview.appendChild(node));

	return preview;
}

function copy(element) {
	element.select();
	document.execCommand("copy");
}

function toggleAdvancedOptions(advancedOptionSection) {
	if (advancedOptionSection.style.display === "none") {
		advancedOptionSection.style.display = "";
	} else {
		advancedOptionSection.style.display = "none";
	}
}

function textTransform() {
	const alphabetized = alphabetize(input.value);
	output.value = alphabetized;

	if (prefixValue() === DEFAULT_PREFIX_VALUE) {
		const alphabetizedPreview = alphabetizePreview(alphabetized);
		previewWrapper.innerHTML = "";
		previewWrapper.appendChild(alphabetizedPreview);
	} else {
		previewWrapper.innerHTML = "[Preview Unavailable]";
	}
}

// Update text transform on prefix change.
prefixInput.addEventListener("keyup", textTransform);

// Handle text transform on input change.
input.addEventListener("keyup", textTransform);

// Handle text copying.
copyButton.addEventListener("click", () => copy(output));
advancedOptionsButton.addEventListener("click", () => toggleAdvancedOptions(advancedOptions));
